#!/usr/bin/perl
use strict;
use warnings;
use File::Basename;
use File::Path qw(make_path);
use YAML::Tiny;
use Cwd qw(getcwd abs_path);
use FindBin '$Bin';
use lib "$Bin/lib";
#use lib '/root/miniconda3/lib/site_perl/5.26.2';
#use PopGenome;

my $run = shift or die ("Error in command line arguments\n");
my @args = @ARGV;

#-----
#	PopGenome_Indexing::INDEXING($allcfg,$skipsh) if ($run eq 'step0_indexing');

#	PopGenome_Data_Filtering::DATA_FILTERING($allcfg,$skipsh) if ($run eq 'read_filtering');
if ($run eq 'steps') {
		require PopGenome_arrange;
		PopGenome_arrange::ARRANGE(\@args);
}
elsif ($run eq 'read_filtering') {
		require PopGenome_Data_Filtering;
		PopGenome_Data_Filtering::Main(\@args);
}
elsif ($run eq 'read_mapping') {
		require PopGenome_Mapping;
		PopGenome_Mapping::MAPPING(\@args);
}
elsif ($run eq 'read_report') {
		require PopGenome_Read_Report;
		PopGeome_Read_Report::READ_REPORT(\@args);
}
elsif ($run eq 'variant_calling') {
		require PopGenome_Variant_Calling;
		PopGenome_Variant_Calling::VARIANT_CALLING(\@args);
}
elsif ($run eq 'combine_calling') {
		require PopGenome_Combine_Calling;
		PopGenome_Combine_Calling::COMBINE_CALLING(\@args);
}
elsif ($run eq 'mtphylogeny') {
		require PopGenome_Mtphylogeny;
		PopGenome_Mtphylogeny::MTPHYLOGENY(\@args);
}
elsif ($run eq 'test') {
		require PopGenome_test;
		PopGenome_test::TEST(\@args);
}
else {
	&usage;
	exit;
}


#----------------------------------- usage sub progamm ------------------------------------------

sub usage{
	print STDERR <<USAGE;

Description
	For Popolation genetic analysis in helminths.

Version 
	06 Feb 2019: Version v1.0.0

Author
	Daxi Wang
	email: darcywdx\@gmail.com
	please contact me if you find any bug.
							   	
Usage
	hpgap --config <path to the .yml config file> --run <String> [-options]
	
	--run <String> use this option choose one of steps below (the option should not be used with --step at the same time)
		step0: 
			indexing
		step1:
			read_filtering
			read_mapping
			read_report
			variant_calling
			combine_calling
			variant_filtering
		step2:
			relatedness
		step3:
			phylogeny
			admixture
		step4:
			homozygosity
			roh
			ld
			slidingwindow
			sfs

	--config path to the .yml config file
	
	--step <String>	specified steps separated by semicolon(;). The names of analyses in each step are separated by comma (,);
		(e.g. "0:indexing;1:read_filtering,read_mapping,recalibration,variant_calling,combine_calling,variant_filtering;3:phylogeny,admixture;4:homozygosity,roh,ld,slidingwindow,sfs").

		All the avaliable analyses in each step: 
			0:indexing;
			1:read_filtering,read_mapping,recalibration,variant_calling,combine_calling,variant_filtering;
			3:phylogeny,admixture;
			4:homozygosity,roh,ld,slidingwindow,sfs
			6:mktest

	--skipsh use this to skip running bash inside the pipeline
	
	--help

Note 
	1. No symbolic link to the files outside the mounted volume, which means all the data files themselves should be located within the mounted volume.
	2. For each pair of fastq data, the second colomn (library or flowcell code) should always be unique.
	3. All the paths need to be absolute path

Example 
	To be done
USAGE
}


#	PopGenome_Variant_Filtering::VARIANT_FILTERING($allcfg,$skipsh) if ($run eq 'variant_filtering');

	#############################################
	#											#
	#	Require statistics of variants	
	#											#
	#############################################

	#02.SampleFiltering
#	PopGenome_Relatedness::RELATEDNESS($allcfg,$skipsh) if ($run eq 'relatedness');

#	PopGenome_Phylogeny::PHYLOGENY($allcfg,$skipsh) if ($run eq 'phylogeny');
	
#	PopGenome_Admixture::ADMIXTURE($allcfg,$skipsh) if ($run eq 'admixture');

#	PopGenome_Homozygosity::HOMOZYGOSITY($allcfg,$skipsh) if ($run eq 'step4_homozygosity');

#	PopGenome_ROH::ROH($allcfg,$skipsh) if ($run eq 'roh');

#	PopGenome_LD::LD($allcfg,$skipsh) if ($run eq 'ld');

	#05.IntraPopulation
#	PopGenome_Slidingwindow::SLIDINGWINDOW($allcfg,$skipsh) if ($run eq 'slidingwindow');

#	PopGenome_SFS::SFS($allcfg,$skipsh) if ($run eq 'sfs');

	#06.Selection
#	PopGenome_MKTEST::MKTEST($allcfg,$skipsh) if ($run eq 'mktest');